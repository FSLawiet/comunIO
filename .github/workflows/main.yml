name: 'Comun.IO Release'

on:
  push:
    branches:
      - main

jobs:
  create-release:
    name: Inicialização de Release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.step-id.outputs.release_id }}
      upload_url: ${{ steps.step-url.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
      - name: create release
        id: create-release
        uses: actions/github-script@v6.3.3
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            core.exportVariable('RELEASE_ID', data.id);
            core.exportVariable('RELEASE_UPLOAD_URL', data.upload_url);
      - name: Set Release Id
        id: step-id
        run: echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
      - name: Set Upload URL
        id: step-url
        run: echo "upload_url=$RELEASE_UPLOAD_URL" >> $GITHUB_OUTPUT

  build-tauri:
    needs: create-release
    name: Fazer o Build dos Aplicativo Nativos em Tauri
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: npm install # change this to npm or pnpm depending on which one you use
      - name: Build Tauri
        id: tauri_build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
  build-apk:
    needs: create-release
    name: Fazer o Build do Aplicativo em APK
    permissions:
      contents: write
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - run: echo ${{ needs.create-release.outputs.upload_url }}
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Instalação de Quasar, Cordova e repositórios
        run: |
          npm i -g @quasar/cli
          npm i -g cordova
          npm i
      - name: Build do Aplicativo
        run: quasar build -m cordova -T android -- -- --packageType=apk
      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
      # ID used to access action output
        id: sign_app
        with:
          releaseDirectory: ./src-cordova/platforms/android/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
      - name: Upload Release APK
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.sign_app.outputs.signedReleaseFile }}
          asset_name: ComunIO.apk
          asset_content_type: application/octet-stream
        # asset_path: 
  publish-release:
    name: Publicação de Release
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    needs: [create-release, build-tauri, build-apk]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
            })
