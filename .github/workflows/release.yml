name: 'App Release'

on:
  push:
    branches:
      - main
jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            NAME: mac
          - os: ubuntu-latest
            NAME: linux
          - os: windows-latest
            NAME: windows
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
      - name: install frontend dependencies
        run: |
          npm i -g @quasar/cli
          npm i -g cordova
          npm i
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build do Aplicativo
        run: quasar build -m cordova -T android -- -- --packageType=apk
      - uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/:repository/releases?per_page=1
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Get upload url
        id: get_upload_url
        run: >
          url=$(echo "$response" | jq -r ".[0].upload_url")
          echo "::set-output name=url::$url"
        env:
          response: ${{ steps.get_latest_release.outputs.data }}
        shell: bash
      - name: Get version
        id: version
        uses: notiz-dev/github-action-json-property@release
        with:
          path: package.json
          prop_path: version
        # Windows
      - name: Upload the windows installer asset
        if: runner.os == 'Windows'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.get_upload_url.outputs.url}}
          asset_path: ./core/target/release/authme-lite-${{steps.version.outputs.prop}}-windows-x64-installer.msi
          asset_name: authme-lite-${{steps.version.outputs.prop}}-windows-x64-installer.msi
          asset_content_type: application/octet-stream
      # Linux
      - name: Upload the linux installer asset
        if: runner.os == 'Linux'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.get_upload_url.outputs.url}}
          asset_path: ./core/target/release/authme-lite-${{steps.version.outputs.prop}}-linux-x64-installer.appimage
          asset_name: authme-lite-${{steps.version.outputs.prop}}-linux-x64-installer.appimage
          asset_content_type: application/octet-stream
      # Mac
      - name: Upload the mac installer asset
        if: runner.os == 'macOS'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.get_upload_url.outputs.url}}
          asset_path: ./core/target/release/authme-lite-${{steps.version.outputs.prop}}-mac-x64-installer.dmg
          asset_name: authme-lite-${{steps.version.outputs.prop}}-mac-x64-installer.dmg
          asset_content_type: application/octet-stream
      - name: Remove useless folders
        run: >
          rm -rf core/target/release/build
          rm -rf core/target/release/deps

          rm -rf core/target/release/bundle
        shell: bash
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: authme-lite-latest-release-${{matrix.NAME}}-x64-installer-portable
          path: core/target/release
